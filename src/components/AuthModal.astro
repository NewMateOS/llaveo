---
// Componente de autenticación reutilizable
export interface Props {
  mode?: 'login' | 'register' | 'forgot-password';
  onSuccess?: () => void;
  onError?: (error: string) => void;
}

const { mode = 'login', onSuccess, onError } = Astro.props;
---

<div id="auth-modal" class="fixed inset-0 bg-black bg-opacity-50 hidden flex items-center justify-center z-50 p-4">
  <div class="bg-white rounded-2xl shadow-xl max-w-md w-full p-8 relative">
    <!-- Close Button -->
    <button 
      id="close-auth-modal" 
      class="absolute top-4 right-4 text-gray-400 hover:text-gray-600 transition-colors"
    >
      <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
      </svg>
    </button>

    <!-- Logo -->
    <div class="text-center mb-8">
      <div class="w-16 h-16 rounded-2xl flex items-center justify-center mx-auto mb-4 shadow-md" style="background: linear-gradient(135deg, var(--primary) 0%, var(--primary-dark) 100%);">
        <span class="text-white font-bold text-2xl">L</span>
      </div>
      <h2 class="text-2xl font-bold mb-2" style="color: var(--text-primary);">
        {mode === 'login' ? 'Iniciar Sesión' : mode === 'register' ? 'Crear Cuenta' : 'Recuperar Contraseña'}
      </h2>
      <p class="text-gray-600">
        {mode === 'login' ? 'Accede a tu cuenta para gestionar propiedades' : 
         mode === 'register' ? 'Crea tu cuenta para empezar' : 
         'Ingresa tu email para recuperar tu contraseña'}
      </p>
    </div>

    <!-- Auth Form -->
    <form id="auth-form" class="space-y-6">
      <!-- Email Field -->
      <div>
        <label for="email" class="block text-sm font-medium text-gray-700 mb-2">
          Email
        </label>
        <input
          type="email"
          id="email"
          name="email"
          required
          class="w-full px-4 py-3 border border-gray-200 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent transition-all duration-200"
          placeholder="tu@email.com"
        />
      </div>

      <!-- Password Field (only for login/register) -->
      {mode !== 'forgot-password' && (
        <div>
          <label for="password" class="block text-sm font-medium text-gray-700 mb-2">
            Contraseña
          </label>
          <input
            type="password"
            id="password"
            name="password"
            required
            class="w-full px-4 py-3 border border-gray-200 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent transition-all duration-200"
            placeholder="••••••••"
          />
        </div>
      )}

      <!-- Name Field (only for register) -->
      {mode === 'register' && (
        <div>
          <label for="name" class="block text-sm font-medium text-gray-700 mb-2">
            Nombre completo
          </label>
          <input
            type="text"
            id="name"
            name="name"
            required
            class="w-full px-4 py-3 border border-gray-200 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent transition-all duration-200"
            placeholder="Tu nombre completo"
          />
        </div>
      )}

      <!-- Submit Button -->
      <button
        type="submit"
        class="w-full py-3 px-4 rounded-lg text-white font-medium shadow-sm hover:shadow-md transition-all duration-200 transform hover:scale-105 active:scale-95"
        style="background: linear-gradient(135deg, var(--primary) 0%, var(--primary-dark) 100%);"
      >
        {mode === 'login' ? 'Iniciar Sesión' : mode === 'register' ? 'Crear Cuenta' : 'Enviar Email'}
      </button>

      <!-- Google OAuth Button -->
      <button
        type="button"
        id="google-auth-btn"
        class="w-full py-3 px-4 rounded-lg border border-gray-200 text-gray-700 font-medium hover:bg-gray-50 transition-all duration-200 flex items-center justify-center gap-3"
      >
        <svg class="w-5 h-5" viewBox="0 0 24 24">
          <path fill="#4285F4" d="M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z"/>
          <path fill="#34A853" d="M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z"/>
          <path fill="#FBBC05" d="M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z"/>
          <path fill="#EA4335" d="M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z"/>
        </svg>
        Continuar con Google
      </button>

      <!-- Mode Switch Links -->
      <div class="text-center text-sm text-gray-600">
        {mode === 'login' && (
          <>
            <a href="#" id="forgot-password-link" class="text-primary hover:underline">¿Olvidaste tu contraseña?</a>
            <br class="my-2" />
            <span>¿No tienes cuenta? </span>
            <a href="#" id="register-link" class="text-primary hover:underline font-medium">Crear cuenta</a>
          </>
        )}
        {mode === 'register' && (
          <>
            <span>¿Ya tienes cuenta? </span>
            <a href="#" id="login-link" class="text-primary hover:underline font-medium">Iniciar sesión</a>
          </>
        )}
        {mode === 'forgot-password' && (
          <>
            <span>¿Recordaste tu contraseña? </span>
            <a href="#" id="back-to-login-link" class="text-primary hover:underline font-medium">Volver al login</a>
          </>
        )}
      </div>
    </form>

    <!-- Error/Success Messages -->
    <div id="auth-message" class="mt-4 p-3 rounded-lg hidden"></div>
  </div>
</div>

<script>
  import { supabase } from '../lib/supabase';

  // Auth state
  let currentMode = 'login';
  let currentUser = null;

  // DOM elements
  const authModal = document.getElementById('auth-modal');
  const authForm = document.getElementById('auth-form');
  const authMessage = document.getElementById('auth-message');
  const closeBtn = document.getElementById('close-auth-modal');
  const googleBtn = document.getElementById('google-auth-btn');

  // Mode switch links
  const loginLink = document.getElementById('login-link');
  const registerLink = document.getElementById('register-link');
  const forgotPasswordLink = document.getElementById('forgot-password-link');
  const backToLoginLink = document.getElementById('back-to-login-link');

  // Initialize auth
  async function initAuth() {
    // Check current session
    const { data: { session } } = await supabase.auth.getSession();
    if (session) {
      currentUser = session.user;
      updateAuthState();
    }

    // Listen for auth changes
    supabase.auth.onAuthStateChange((event, session) => {
      currentUser = session?.user || null;
      updateAuthState();
      
      if (event === 'SIGNED_IN' && onSuccess) {
        onSuccess();
        hideAuthModal();
      }
    });
  }

  function updateAuthState() {
    // Update UI based on auth state
    const loginBtn = document.querySelector('[onclick="showLoginModal()"]');
    if (loginBtn) {
      if (currentUser) {
        loginBtn.textContent = 'Mi Cuenta';
        loginBtn.onclick = showUserMenu;
      } else {
        loginBtn.textContent = 'Login';
        loginBtn.onclick = showLoginModal;
      }
    }
  }

  function showUserMenu() {
    // TODO: Implement user menu dropdown
    console.log('Show user menu for:', currentUser);
  }

  // Show/hide modal
  function showAuthModal(mode = 'login') {
    currentMode = mode;
    updateModalContent();
    authModal.classList.remove('hidden');
    authModal.classList.add('flex');
  }

  function hideAuthModal() {
    authModal.classList.add('hidden');
    authModal.classList.remove('flex');
    authForm.reset();
    hideMessage();
  }

  function updateModalContent() {
    const title = document.querySelector('#auth-modal h2');
    const subtitle = document.querySelector('#auth-modal p');
    const submitBtn = document.querySelector('#auth-form button[type="submit"]');
    const passwordField = document.getElementById('password');
    const nameField = document.getElementById('name');

    if (title) {
      title.textContent = currentMode === 'login' ? 'Iniciar Sesión' : 
                        currentMode === 'register' ? 'Crear Cuenta' : 'Recuperar Contraseña';
    }

    if (subtitle) {
      subtitle.textContent = currentMode === 'login' ? 'Accede a tu cuenta para gestionar propiedades' : 
                           currentMode === 'register' ? 'Crea tu cuenta para empezar' : 
                           'Ingresa tu email para recuperar tu contraseña';
    }

    if (submitBtn) {
      submitBtn.textContent = currentMode === 'login' ? 'Iniciar Sesión' : 
                             currentMode === 'register' ? 'Crear Cuenta' : 'Enviar Email';
    }

    // Show/hide fields based on mode
    if (passwordField) {
      passwordField.parentElement.style.display = currentMode === 'forgot-password' ? 'none' : 'block';
    }
    if (nameField) {
      nameField.parentElement.style.display = currentMode === 'register' ? 'block' : 'none';
    }
  }

  // Message handling
  function showMessage(message, type = 'error') {
    authMessage.textContent = message;
    authMessage.className = `mt-4 p-3 rounded-lg ${type === 'error' ? 'bg-red-50 text-red-700 border border-red-200' : 'bg-green-50 text-green-700 border border-green-200'}`;
    authMessage.classList.remove('hidden');
  }

  function hideMessage() {
    authMessage.classList.add('hidden');
  }

  // Auth handlers
  async function handleEmailAuth(event) {
    event.preventDefault();
    hideMessage();

    const formData = new FormData(authForm);
    const email = formData.get('email');
    const password = formData.get('password');
    const name = formData.get('name');

    try {
      if (currentMode === 'login') {
        const { error } = await supabase.auth.signInWithPassword({
          email,
          password
        });
        if (error) throw error;
      } else if (currentMode === 'register') {
        const { error } = await supabase.auth.signUp({
          email,
          password,
          options: {
            data: { full_name: name }
          }
        });
        if (error) throw error;
        showMessage('¡Cuenta creada! Revisa tu email para confirmar tu cuenta.', 'success');
      } else if (currentMode === 'forgot-password') {
        const { error } = await supabase.auth.resetPasswordForEmail(email);
        if (error) throw error;
        showMessage('¡Email enviado! Revisa tu bandeja de entrada.', 'success');
      }
    } catch (error) {
      showMessage(error.message || 'Error en la autenticación');
    }
  }

  async function handleGoogleAuth() {
    try {
      const { error } = await supabase.auth.signInWithOAuth({
        provider: 'google',
        options: {
          redirectTo: `${window.location.origin}/auth/callback`
        }
      });
      if (error) throw error;
    } catch (error) {
      showMessage(error.message || 'Error con Google OAuth');
    }
  }

  // Event listeners
  closeBtn?.addEventListener('click', hideAuthModal);
  authForm?.addEventListener('submit', handleEmailAuth);
  googleBtn?.addEventListener('click', handleGoogleAuth);

  // Mode switching
  loginLink?.addEventListener('click', (e) => {
    e.preventDefault();
    showAuthModal('login');
  });

  registerLink?.addEventListener('click', (e) => {
    e.preventDefault();
    showAuthModal('register');
  });

  forgotPasswordLink?.addEventListener('click', (e) => {
    e.preventDefault();
    showAuthModal('forgot-password');
  });

  backToLoginLink?.addEventListener('click', (e) => {
    e.preventDefault();
    showAuthModal('login');
  });

  // Close on backdrop click
  authModal?.addEventListener('click', (e) => {
    if (e.target === authModal) {
      hideAuthModal();
    }
  });

  // Global functions for external use
  window.showLoginModal = () => showAuthModal('login');
  window.showRegisterModal = () => showAuthModal('register');
  window.showForgotPasswordModal = () => showAuthModal('forgot-password');
  window.hideAuthModal = hideAuthModal;

  // Initialize
  initAuth();
</script>
