---
// Componente de autenticaci√≥n reutilizable
export interface Props {
  mode?: 'login' | 'register' | 'forgot-password';
  onSuccess?: () => void;
  onError?: (error: string) => void;
}

const { mode = 'login', onSuccess, onError } = Astro.props;
---

<div id="auth-modal" class="fixed inset-0 bg-black bg-opacity-50 hidden flex items-center justify-center z-50 p-4">
  <div class="bg-white rounded-2xl shadow-xl max-w-md w-full p-8 relative">
    <!-- Close Button -->
    <button 
      id="close-auth-modal" 
      class="absolute top-4 right-4 text-gray-400 hover:text-gray-600 transition-colors"
    >
      <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
      </svg>
    </button>

    <!-- Logo -->
    <div class="text-center mb-8">
      <div class="w-16 h-16 rounded-2xl flex items-center justify-center mx-auto mb-4 shadow-md" style="background: linear-gradient(135deg, var(--primary) 0%, var(--primary-dark) 100%);">
        <span class="text-white font-bold text-2xl">L</span>
      </div>
      <h2 class="text-2xl font-bold mb-2" style="color: var(--text-primary);">
        {mode === 'login' ? 'Iniciar Sesi√≥n' : mode === 'register' ? 'Crear Cuenta' : 'Recuperar Contrase√±a'}
      </h2>
      <p class="text-gray-600">
        {mode === 'login' ? 'Accede a tu cuenta para gestionar propiedades' : 
         mode === 'register' ? 'Crea tu cuenta para empezar' : 
         'Ingresa tu email para recuperar tu contrase√±a'}
      </p>
    </div>

    <!-- Auth Form -->
    <form id="auth-form" class="space-y-6">
      <!-- Email Field -->
      <div>
        <label for="email" class="block text-sm font-medium text-gray-700 mb-2">
          Email
        </label>
        <input
          type="email"
          id="email"
          name="email"
          required
          class="w-full px-4 py-3 border border-gray-200 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent transition-all duration-200"
          placeholder="tu@email.com"
        />
      </div>

      <!-- Password Field (only for login/register) -->
      {mode !== 'forgot-password' && (
        <div>
          <label for="password" class="block text-sm font-medium text-gray-700 mb-2">
            Contrase√±a
          </label>
          <input
            type="password"
            id="password"
            name="password"
            required
            class="w-full px-4 py-3 border border-gray-200 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent transition-all duration-200"
            placeholder="‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢"
          />
        </div>
      )}

      <!-- Name Field (only for register) -->
      {mode === 'register' && (
        <div>
          <label for="name" class="block text-sm font-medium text-gray-700 mb-2">
            Nombre completo
          </label>
          <input
            type="text"
            id="name"
            name="name"
            required
            class="w-full px-4 py-3 border border-gray-200 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent transition-all duration-200"
            placeholder="Tu nombre completo"
          />
        </div>
      )}

      <!-- Submit Button -->
      <button
        type="submit"
        class="w-full py-3 px-4 rounded-lg text-white font-medium shadow-sm hover:shadow-md transition-all duration-200 transform hover:scale-105 active:scale-95"
        style="background: linear-gradient(135deg, var(--primary) 0%, var(--primary-dark) 100%);"
      >
        {mode === 'login' ? 'Iniciar Sesi√≥n' : mode === 'register' ? 'Crear Cuenta' : 'Enviar Email'}
      </button>

      <!-- Google OAuth Button -->
      <button
        type="button"
        id="google-auth-btn"
        class="w-full py-3 px-4 rounded-lg border border-gray-200 text-gray-700 font-medium hover:bg-gray-50 transition-all duration-200 flex items-center justify-center gap-3"
      >
        <svg class="w-5 h-5" viewBox="0 0 24 24">
          <path fill="#4285F4" d="M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z"/>
          <path fill="#34A853" d="M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z"/>
          <path fill="#FBBC05" d="M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z"/>
          <path fill="#EA4335" d="M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z"/>
        </svg>
        Continuar con Google
      </button>

      <!-- Mode Switch Links -->
      <div class="text-center text-sm text-gray-600">
        {mode === 'login' && (
          <>
            <a href="#" id="forgot-password-link" class="text-primary hover:underline">¬øOlvidaste tu contrase√±a?</a>
            <br class="my-2" />
            <span>¬øNo tienes cuenta? </span>
            <a href="#" id="register-link" class="text-primary hover:underline font-medium">Crear cuenta</a>
          </>
        )}
        {mode === 'register' && (
          <>
            <span>¬øYa tienes cuenta? </span>
            <a href="#" id="login-link" class="text-primary hover:underline font-medium">Iniciar sesi√≥n</a>
          </>
        )}
        {mode === 'forgot-password' && (
          <>
            <span>¬øRecordaste tu contrase√±a? </span>
            <a href="#" id="back-to-login-link" class="text-primary hover:underline font-medium">Volver al login</a>
          </>
        )}
      </div>
    </form>

    <!-- Error/Success Messages -->
    <div id="auth-message" class="mt-4 p-3 rounded-lg hidden"></div>
  </div>
</div>

<script>
  import { getSupabaseClient } from '../lib/supabase-client';

  const supabase = getSupabaseClient();

  // Auth state
  let currentMode = 'login';
  let currentUser = null;

  // DOM elements
  const authModal = document.getElementById('auth-modal');
  const authForm = document.getElementById('auth-form');
  const authMessage = document.getElementById('auth-message');
  const closeBtn = document.getElementById('close-auth-modal');
  const googleBtn = document.getElementById('google-auth-btn');

  // Mode switch links
  const loginLink = document.getElementById('login-link');
  const registerLink = document.getElementById('register-link');
  const forgotPasswordLink = document.getElementById('forgot-password-link');
  const backToLoginLink = document.getElementById('back-to-login-link');

  // Initialize auth
  async function initAuth() {
    console.log('üîê [AuthModal] Inicializando autenticaci√≥n...');
    
    try {
      // Check current session
      const { data: { session }, error } = await supabase.auth.getSession();
      
      if (error) {
        console.error('‚ùå [AuthModal] Error al obtener sesi√≥n inicial:', error);
      } else if (session) {
        console.log('‚úÖ [AuthModal] Sesi√≥n existente encontrada:', session.user.email);
        currentUser = session.user;
        updateAuthState();
      } else {
        console.log('‚ÑπÔ∏è [AuthModal] No hay sesi√≥n activa');
      }
    } catch (error) {
      console.error('‚ùå [AuthModal] Error en initAuth:', error);
    }

    // Listen for auth changes
    supabase.auth.onAuthStateChange((event, session) => {
      console.log(`üîÑ [AuthModal] Auth state changed: ${event}`, {
        event,
        hasSession: !!session,
        userEmail: session?.user?.email || 'N/A',
        userId: session?.user?.id || 'N/A'
      });
      
      currentUser = session?.user || null;
      updateAuthState();
      
      if (event === 'SIGNED_IN') {
        console.log('‚úÖ [AuthModal] Usuario inici√≥ sesi√≥n, actualizando UI');
        hideAuthModal();
        // Disparar actualizaci√≥n de UI en index.astro
        if ((window as any).updateUserUI) {
          console.log('üì° [AuthModal] Llamando updateUserUI...');
          (window as any).updateUserUI(true);
        } else {
          console.warn('‚ö†Ô∏è [AuthModal] updateUserUI no est√° disponible en window');
        }
      } else if (event === 'SIGNED_OUT') {
        console.log('üëã [AuthModal] Usuario cerr√≥ sesi√≥n');
        if ((window as any).updateUserUI) {
          (window as any).updateUserUI(true);
        }
      } else if (event === 'TOKEN_REFRESHED') {
        console.log('üîÑ [AuthModal] Token refrescado');
      } else if (event === 'USER_UPDATED') {
        console.log('üë§ [AuthModal] Usuario actualizado');
      }
    });
    
    console.log('‚úÖ [AuthModal] Autenticaci√≥n inicializada, listener configurado');
  }

  function updateAuthState() {
    // Update UI based on auth state
    // La UI se actualiza desde index.astro, no necesitamos hacerlo aqu√≠
  }

  function showUserMenu() {
    // TODO: Implement user menu dropdown
    // Implementar men√∫ desplegable de usuario
  }

  // Show/hide modal
  function showAuthModal(mode = 'login') {
    currentMode = mode;
    updateModalContent();
    if (authModal) {
      authModal.classList.remove('hidden');
      authModal.classList.add('flex');
    }
  }

  function hideAuthModal() {
    if (authModal) {
      authModal.classList.add('hidden');
      authModal.classList.remove('flex');
    }
    if (authForm) {
      (authForm as HTMLFormElement).reset();
    }
    hideMessage();
  }

  function updateModalContent() {
    const title = document.querySelector('#auth-modal h2');
    const subtitle = document.querySelector('#auth-modal p');
    const submitBtn = document.querySelector('#auth-form button[type="submit"]');
    const passwordField = document.getElementById('password');
    const nameField = document.getElementById('name');

    if (title) {
      title.textContent = currentMode === 'login' ? 'Iniciar Sesi√≥n' : 
                        currentMode === 'register' ? 'Crear Cuenta' : 'Recuperar Contrase√±a';
    }

    if (subtitle) {
      subtitle.textContent = currentMode === 'login' ? 'Accede a tu cuenta para gestionar propiedades' : 
                           currentMode === 'register' ? 'Crea tu cuenta para empezar' : 
                           'Ingresa tu email para recuperar tu contrase√±a';
    }

    if (submitBtn) {
      submitBtn.textContent = currentMode === 'login' ? 'Iniciar Sesi√≥n' : 
                             currentMode === 'register' ? 'Crear Cuenta' : 'Enviar Email';
    }

    // Show/hide fields based on mode
    if (passwordField && passwordField.parentElement) {
      passwordField.parentElement.style.display = currentMode === 'forgot-password' ? 'none' : 'block';
    }
    if (nameField && nameField.parentElement) {
      nameField.parentElement.style.display = currentMode === 'register' ? 'block' : 'none';
    }
  }

  // Message handling
  function showMessage(message: string, type = 'error') {
    if (!authMessage) return;
    authMessage.textContent = message;
    authMessage.className = `mt-4 p-3 rounded-lg ${type === 'error' ? 'bg-red-50 text-red-700 border border-red-200' : 'bg-green-50 text-green-700 border border-green-200'}`;
    authMessage.classList.remove('hidden');
  }

  function hideMessage() {
    if (authMessage) {
      authMessage.classList.add('hidden');
    }
  }

  async function syncSessionWithServer(session: { access_token?: string; refresh_token?: string } | null) {
    if (!session?.access_token || !session?.refresh_token) {
      return;
    }

    try {
      const response = await fetch('/api/auth/session', {
        method: 'POST',
        headers: { 'content-type': 'application/json' },
        credentials: 'same-origin',
        body: JSON.stringify({ session: {
          access_token: session.access_token,
          refresh_token: session.refresh_token
        }})
      });

      if (!response.ok) {
        console.error('‚ö†Ô∏è [AuthModal] No se pudo sincronizar la sesi√≥n con el servidor', await response.text());
      } else {
        console.log('‚úÖ [AuthModal] Sesi√≥n sincronizada con el servidor');
      }
    } catch (error) {
      console.error('‚ö†Ô∏è [AuthModal] Error al sincronizar sesi√≥n con el servidor:', error);
    }
  }

  // Auth handlers
  async function handleEmailAuth(event: Event) {
    event.preventDefault();
    hideMessage();

    if (!authForm) return;

    const formData = new FormData(authForm as HTMLFormElement);
    const email = formData.get('email') as string;
    const password = formData.get('password') as string;
    const name = formData.get('name') as string;

    // Validar campos b√°sicos
    if (!email || !email.includes('@')) {
      showMessage('Por favor ingresa un email v√°lido');
      return;
    }

    if (currentMode !== 'forgot-password' && !password) {
      showMessage('Por favor ingresa tu contrase√±a');
      return;
    }

    try {
      if (currentMode === 'login') {
        console.log('üîê [AuthModal] Iniciando login para:', email);
        
        const { data, error } = await supabase.auth.signInWithPassword({
          email,
          password
        });
        if (error) {
          console.error('‚ùå [AuthModal] Error en login:', {
            message: error.message,
            status: error.status,
            name: error.name
          });
          throw error;
        }
        
        // Verificar que la sesi√≥n se cre√≥ correctamente
        if (data.session) {
          await syncSessionWithServer(data.session);
          console.log('‚úÖ [AuthModal] Login exitoso, sesi√≥n creada:', {
            email: data.session.user.email,
            userId: data.session.user.id,
            expiresAt: new Date(data.session.expires_at! * 1000).toISOString()
          });
          
          // Esperar un momento para que la sesi√≥n se persista
          console.log('‚è≥ [AuthModal] Esperando persistencia de sesi√≥n...');
          await new Promise(resolve => setTimeout(resolve, 200));
          
          // Verificar nuevamente que la sesi√≥n est√° disponible
          console.log('üîç [AuthModal] Verificando sesi√≥n persistida...');
          const { data: { session: verifySession }, error: verifyError } = await supabase.auth.getSession();
          
          if (verifyError) {
            console.error('‚ö†Ô∏è [AuthModal] Error al verificar sesi√≥n despu√©s del login:', verifyError);
          }
          
          if (verifySession) {
            await syncSessionWithServer(verifySession);
            console.log('‚úÖ [AuthModal] Sesi√≥n verificada y persistida correctamente:', {
              email: verifySession.user.email,
              storageKey: 'sb-auth-token',
              localStorage: typeof window !== 'undefined' && !!window.localStorage
            });
            
            // Disparar manualmente la actualizaci√≥n de UI
            if ((window as any).updateUserUI) {
              console.log('üì° [AuthModal] Disparando updateUserUI...');
              (window as any).updateUserUI(true);
            } else {
              console.warn('‚ö†Ô∏è [AuthModal] updateUserUI no disponible, recargando p√°gina...');
              window.location.reload();
              return;
            }
            
            // Cerrar modal despu√©s de que la UI se actualice
            setTimeout(() => {
              console.log('‚úÖ [AuthModal] Cerrando modal de autenticaci√≥n');
              hideAuthModal();
            }, 500);
          } else {
            console.warn('‚ö†Ô∏è [AuthModal] La sesi√≥n no se persisti√≥ correctamente, recargando p√°gina...');
            // Agregar timestamp para evitar cach√©
            window.location.href = window.location.pathname + '?login=success&_t=' + Date.now();
          }
        } else {
          console.error('‚ùå [AuthModal] Login exitoso pero no hay sesi√≥n en data.session');
          throw new Error('No se pudo iniciar sesi√≥n. Por favor intenta de nuevo.');
        }
      } else if (currentMode === 'register') {
        const { data, error } = await supabase.auth.signUp({
          email,
          password,
          options: {
            data: { full_name: name }
          }
        });
        if (error) {
          console.error('Error en registro:', error);
          throw error;
        }
        
        if (data.user) {
          showMessage('¬°Cuenta creada! Revisa tu email para confirmar tu cuenta.', 'success');
          // Despu√©s de 3 segundos, cambiar a modo login
          setTimeout(() => {
            showAuthModal('login');
            showMessage('Ahora puedes iniciar sesi√≥n con tu nueva cuenta', 'success');
          }, 3000);
        }
      } else if (currentMode === 'forgot-password') {
        const { error } = await supabase.auth.resetPasswordForEmail(email, {
          redirectTo: `${window.location.origin}/auth/callback?mode=recovery`
        });
        if (error) {
          console.error('Error en recuperaci√≥n de contrase√±a:', error);
          throw error;
        }
        showMessage('¬°Email enviado! Revisa tu bandeja de entrada.', 'success');
      }
    } catch (error: any) {
      console.error('Error completo en autenticaci√≥n:', error);
      const errorMessage = error?.message || error?.error_description || 'Error en la autenticaci√≥n';
      showMessage(errorMessage);
    }
  }

  async function handleGoogleAuth() {
    try {
      // Construir URL de callback asegur√°ndonos de incluir el protocolo
      const redirectUrl = `${window.location.protocol}//${window.location.host}/auth/callback`;
      console.log('üîê Iniciando OAuth con redirectTo:', redirectUrl);
      
      const { data, error } = await supabase.auth.signInWithOAuth({
        provider: 'google',
        options: {
          redirectTo: redirectUrl,
          queryParams: {
            access_type: 'offline',
            prompt: 'consent',
          }
        }
      });
      
      if (error) {
        console.error('‚ùå Error en OAuth:', error);
        throw error;
      }
      
      // Si OAuth redirige, la funci√≥n no llegar√° aqu√≠
      // Pero si hay alg√∫n error de configuraci√≥n, lo mostraremos
    } catch (error: any) {
      console.error('‚ùå Error completo en OAuth:', error);
      showMessage(error?.message || 'Error con Google OAuth. Verifica que la URL de callback est√© configurada en Supabase.');
    }
  }

  // Event listeners
  closeBtn?.addEventListener('click', hideAuthModal);
  authForm?.addEventListener('submit', handleEmailAuth);
  googleBtn?.addEventListener('click', handleGoogleAuth);

  // Mode switching
  loginLink?.addEventListener('click', (e) => {
    e.preventDefault();
    showAuthModal('login');
  });

  registerLink?.addEventListener('click', (e) => {
    e.preventDefault();
    showAuthModal('register');
  });

  forgotPasswordLink?.addEventListener('click', (e) => {
    e.preventDefault();
    showAuthModal('forgot-password');
  });

  backToLoginLink?.addEventListener('click', (e) => {
    e.preventDefault();
    showAuthModal('login');
  });

  // Close on backdrop click
  authModal?.addEventListener('click', (e) => {
    if (e.target === authModal) {
      hideAuthModal();
    }
  });

  // Global functions for external use
  (window as any).showLoginModal = () => showAuthModal('login');
  (window as any).showRegisterModal = () => showAuthModal('register');
  (window as any).showForgotPasswordModal = () => showAuthModal('forgot-password');
  (window as any).hideAuthModal = hideAuthModal;

  // Initialize
  initAuth();
</script>
