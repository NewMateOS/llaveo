---
export const prerender = false;

import FavoriteButton from '../components/FavoriteButton.astro';
import '../styles/global.css';

const brand = import.meta.env.PUBLIC_BRAND_NAME || 'LLAVE';

// Función para obtener la primera imagen
function firstImg(images: Array<{ url: string; sort_order?: number }> | null | undefined): string {
  if (!images || images.length === 0) return '/placeholder-property.jpg';
  const sorted = [...images].sort((a, b) => (a.sort_order || 0) - (b.sort_order || 0));
  return sorted[0]?.url || '/placeholder-property.jpg';
}
---

<!DOCTYPE html>
<html lang="es">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Mis Favoritos - LLAVE</title>
  <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
  <meta name="generator" content={Astro.generator} />
</head>
<body>
  <div class="min-h-screen bg-gray-50 brand-surface-soft">
    <!-- Header -->
    <div class="bg-white border-b border-gray-100 app-header sticky top-0 z-40">
      <div class="max-w-7xl mx-auto px-6 py-6">
        <div class="flex items-center justify-between">
          <div class="flex items-center gap-4">
            <a href="/" class="flex items-center gap-3 hover:opacity-80 transition-opacity duration-200">
              <img src="/logo.svg" alt={brand} class="h-10 w-auto" />
            </a>
          </div>
          
          <div class="flex items-center gap-4">
            <a href="/resultados" class="text-gray-600 hover:text-primary transition-colors duration-200 link-underline focus-ring">
              <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
              </svg>
            </a>
            <div id="user-info-section" class="flex items-center gap-2">
              <span id="user-name" class="text-sm font-medium hidden" style="color: var(--text-primary);"></span>
              <button 
                onclick="handleLogout()"
                class="px-4 py-2 rounded-lg text-sm font-medium text-gray-600 hover:bg-gray-100 transition-colors duration-200 hidden"
                id="logout-btn"
              >
                Salir
              </button>
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- Main Content -->
    <div class="max-w-7xl mx-auto px-6 py-8">
      <!-- Page Header -->
      <div class="mb-8 reveal">
        <h1 class="text-3xl font-bold mb-2" style="color: var(--text-primary);">
          Mis Favoritos
        </h1>
        <p class="text-gray-600">
          Propiedades que has guardado para revisar más tarde
        </p>
      </div>

      <!-- Loading State / Skeletons -->
      <div id="loading-state" class="py-6 reveal is-visible">
        <div class="space-y-6">
          {Array.from({ length: 2 }).map(() => (
            <article class="bg-white rounded-xl shadow-sm border border-gray-100 overflow-hidden w-full">
              <div class="flex flex-col lg:flex-row">
                <div class="relative overflow-hidden h-64 lg:h-80 lg:w-1/2 shimmer"></div>
                <div class="p-8 lg:w-1/2 flex flex-col justify-between">
                  <div class="space-y-4">
                    <div class="h-7 w-3/4 shimmer rounded"></div>
                    <div class="h-4 w-1/2 shimmer rounded"></div>
                    <div class="h-16 w-full shimmer rounded"></div>
                    <div class="flex gap-4">
                      <div class="h-5 w-24 shimmer rounded"></div>
                      <div class="h-5 w-24 shimmer rounded"></div>
                      <div class="h-5 w-24 shimmer rounded"></div>
                    </div>
                  </div>
                  <div class="mt-6 flex gap-3">
                    <div class="h-11 flex-1 shimmer rounded-lg"></div>
                    <div class="h-11 w-32 shimmer rounded-lg"></div>
                  </div>
                </div>
              </div>
            </article>
          ))}
        </div>
      </div>

      <!-- Empty State (hidden by default) -->
      <div id="empty-state" class="text-center py-16 hidden">
        <div class="w-24 h-24 mx-auto mb-6 rounded-full bg-gray-100 flex items-center justify-center">
          <svg class="w-12 h-12 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z"></path>
          </svg>
        </div>
        <h3 class="text-xl font-semibold mb-2" style="color: var(--text-primary);">
          No tienes favoritos aún
        </h3>
        <p class="text-gray-600 mb-6">
          Explora nuestras propiedades y guarda las que más te gusten
        </p>
        <a 
          href="/resultados"
          class="inline-flex items-center gap-2 px-6 py-3 rounded-lg text-sm font-medium text-white shadow-sm hover:shadow-md transition-all duration-200 btn-primary"
        >
          <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
          </svg>
          Explorar Propiedades
        </a>
      </div>

      <!-- Favorites Container (hidden by default) -->
      <div id="favorites-container" class="grid grid-cols-1 md:grid-cols-2 gap-6 md:gap-8 hidden"></div>
    </div>
  </div>

  <!-- Inquiry Modal -->
  <div id="inquiryModal" class="fixed inset-0 bg-black bg-opacity-50 hidden items-center justify-center z-50 p-4">
    <div class="bg-white rounded-xl shadow-xl max-w-md w-full">
      <!-- Modal Header -->
      <div class="px-6 py-4 border-b border-gray-100">
        <div class="flex items-center justify-between">
          <h3 class="text-lg font-semibold" style="color: var(--text-primary);">Consultar Propiedad</h3>
          <button
            onclick="closeInquiryModal()"
            class="w-8 h-8 rounded-lg flex items-center justify-center hover:bg-gray-100 transition-colors duration-200 focus-ring"
          >
            <svg class="w-5 h-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
            </svg>
          </button>
        </div>
      </div>

      <!-- Modal Body -->
      <div class="px-6 py-6">
        <form id="inquiryForm" onsubmit="submitInquiry(event)" class="space-y-4">
          <input type="hidden" id="propertyId" name="property_id" />
          
          <div>
            <label class="block text-sm font-medium mb-2" style="color: var(--text-primary);">Nombre *</label>
            <input
              type="text"
              name="name"
              required
              class="w-full px-4 py-3 border border-gray-200 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent transition-all duration-200"
              placeholder="Tu nombre completo"
            />
          </div>

          <div>
            <label class="block text-sm font-medium mb-2" style="color: var(--text-primary);">Email *</label>
            <input
              type="email"
              name="email"
              required
              class="w-full px-4 py-3 border border-gray-200 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent transition-all duration-200"
              placeholder="tu@email.com"
            />
          </div>

          <div>
            <label class="block text-sm font-medium mb-2" style="color: var(--text-primary);">Teléfono</label>
            <input
              type="tel"
              name="phone"
              class="w-full px-4 py-3 border border-gray-200 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent transition-all duration-200"
              placeholder="+34 600 000 000"
            />
          </div>

          <div>
            <label class="block text-sm font-medium mb-2" style="color: var(--text-primary);">Mensaje</label>
            <textarea
              name="message"
              rows="4"
              class="w-full px-4 py-3 border border-gray-200 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent transition-all duration-200"
              placeholder="Cuéntanos qué te interesa de esta propiedad..."
            ></textarea>
          </div>

          <div class="flex items-center gap-3 pt-4">
            <button
              type="submit"
              class="flex-1 py-3 px-4 rounded-lg text-sm font-medium text-white shadow-sm hover:shadow-md transition-all duration-200"
              style="background: var(--primary);"
            >
              Enviar Consulta
            </button>
            <button
              type="button"
              onclick="closeInquiryModal()"
              class="px-4 py-3 rounded-lg text-sm font-medium border border-gray-200 text-gray-700 hover:bg-gray-50 transition-all duration-200 focus-ring"
            >
              Cancelar
            </button>
          </div>
        </form>
      </div>
    </div>
  </div>

  <script>
    // Header elevated on scroll
    const headerEl = document.querySelector('.app-header');
    const elevateHeader = () => {
      if (!headerEl) return;
      if (window.scrollY > 6) headerEl.classList.add('header-elevated');
      else headerEl.classList.remove('header-elevated');
    };
    window.addEventListener('scroll', elevateHeader, { passive: true });
    elevateHeader();

    // Reveal on scroll - optimizado (para tarjetas renderizadas dinámicamente)
    const prefersReducedMotion = window.matchMedia('(prefers-reduced-motion: reduce)').matches;
    let revealObserver: IntersectionObserver | null = null;
    function setupRevealObserver() {
      if (prefersReducedMotion || !('IntersectionObserver' in window)) return;
      revealObserver = new IntersectionObserver((entries) => {
        entries.forEach((entry) => {
          if (entry.isIntersecting) {
            entry.target.classList.add('is-visible');
            revealObserver?.unobserve(entry.target);
          }
        });
      }, { threshold: 0.1, rootMargin: '0px 0px -5% 0px' }); // Optimizado
    }
    
    // Usar requestIdleCallback si está disponible
    if ('requestIdleCallback' in window) {
      requestIdleCallback(setupRevealObserver, { timeout: 2000 });
    } else {
      setTimeout(setupRevealObserver, 0);
    }

    import { getSupabaseClient } from '../lib/supabase-client.js';
    const supabase = getSupabaseClient();

    // Verificar sesión y cargar favoritos
    async function initFavoritos() {
      const { data: { session }, error } = await supabase.auth.getSession();
      
      if (error || !session?.user) {
        // No hay sesión, redirigir
        window.location.href = '/?error=' + encodeURIComponent('Necesitas iniciar sesión para ver tus favoritos');
        return;
      }

      // Mostrar información del usuario
      const userNameEl = document.getElementById('user-name');
      const logoutBtn = document.getElementById('logout-btn');
      const name = session.user.user_metadata?.full_name || 
                  session.user.user_metadata?.name || 
                  session.user.email?.split('@')[0] || 
                  'Usuario';
      
      if (userNameEl) {
        userNameEl.textContent = name;
        userNameEl.classList.remove('hidden');
      }
      if (logoutBtn) {
        logoutBtn.classList.remove('hidden');
      }

      // Cargar favoritos
      await loadFavorites(session.user.id);
    }

    // Función para cargar favoritos
    async function loadFavorites(userId: string) {
      const loadingState = document.getElementById('loading-state');
      const emptyState = document.getElementById('empty-state');
      const favoritesContainer = document.getElementById('favorites-container');

      try {
        const { data, error } = await supabase
          .from('favorites')
          .select(`
            *,
            property:properties(
              id,
              title,
              description,
              price,
              city,
              address,
              rooms,
              baths,
              area_m2,
              status,
              property_images(url, sort_order)
            )
          `)
          .eq('user_id', userId)
          .order('created_at', { ascending: false });

        if (error) throw error;

        if (loadingState) loadingState.classList.add('hidden');

        if (!data || data.length === 0) {
          if (emptyState) emptyState.classList.remove('hidden');
          if (favoritesContainer) favoritesContainer.classList.add('hidden');
        } else {
          if (emptyState) emptyState.classList.add('hidden');
          if (favoritesContainer) {
            favoritesContainer.classList.remove('hidden');
            interface FavoriteWithProperty {
              property?: {
                id: string;
                title: string;
                description?: string;
                price: number;
                city: string;
                address?: string;
                rooms?: number;
                baths?: number;
                area_m2?: number;
                status?: string;
                property_images?: Array<{ url: string; sort_order?: number }>;
              };
            }
            
            favoritesContainer.innerHTML = data.map((favorite: FavoriteWithProperty) => {
              const property = favorite.property;
              if (!property) return '';
              
              const firstImgUrl = property.property_images && property.property_images.length > 0
                ? [...property.property_images].sort((a, b) => (a.sort_order || 0) - (b.sort_order || 0))[0].url
                : '/placeholder-property.jpg';

              return `
                <article class="bg-white rounded-xl shadow-sm border border-gray-100 overflow-hidden hover:shadow-md transition-shadow duration-200 h-full reveal group">
                  <div class="relative overflow-hidden h-56 md:h-64">
                    <a href="/propiedad/${property.id}" class="block">
                      <div class="absolute inset-0 shimmer"></div>
                      <img src="${firstImgUrl}" alt="${property.title}" class="w-full h-full object-cover transition-transform duration-300 group-hover:scale-105" loading="lazy" onload="this.previousElementSibling && (this.previousElementSibling.style.display='none')" />
                    </a>
                    <div class="absolute top-3 right-3">
                      <span class="px-3 py-1 rounded-full text-xs font-medium text-white shadow-sm badge-soft" style="background: color-mix(in srgb, var(--primary) 85%, #fff); color: #fff; border: none;">
                        ${property.status === 'venta' ? 'Venta' : 'Alquiler'}
                      </span>
                    </div>
                  </div>
                  <div class="p-6 flex flex-col gap-5">
                    <a href="/propiedad/${property.id}" class="block hover:opacity-80 transition-opacity duration-200">
                      <h2 class="text-xl font-semibold mb-2 line-clamp-1 md:line-clamp-2" style="color: var(--text-primary);">${property.title}</h2>
                      <div class="flex items-center mb-3 text-gray-600">
                        <svg class="w-5 h-5 mr-2" style="color: var(--primary);" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z"></path>
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 11a3 3 0 11-6 0 3 3 0 016 0z"></path>
                        </svg>
                        <span class="text-sm md:text-base">${property.address} · ${property.city}</span>
                      </div>
                      <p class="text-gray-600 line-clamp-1 md:line-clamp-2 mb-4">${property.description || 'Descripción no disponible'}</p>
                    </a>
                    <div class="flex items-center justify-between">
                      <div class="text-2xl font-bold" style="color: var(--primary);">
                        ${new Intl.NumberFormat('es-ES',{style:'currency',currency:'EUR'}).format(Number(property.price||0))}
                      </div>
                      <a href="/propiedad/${property.id}" class="px-5 py-3 rounded-lg text-sm font-medium text-white shadow-sm hover:shadow-md transition-all duration-200 btn-primary">
                        Ver Detalles
                      </a>
                    </div>
                  </div>
                </article>
              `;
            }).join('');

            // Activar reveal en nuevas tarjetas
            if (!prefersReducedMotion && revealObserver) {
              favoritesContainer.querySelectorAll('.reveal').forEach((el) => revealObserver!.observe(el));
            } else {
              favoritesContainer.querySelectorAll('.reveal').forEach((el) => el.classList.add('is-visible'));
            }
          }
          // Ocultar skeletons de carga
          if (loadingState) loadingState.classList.add('hidden');
        }
      } catch (error) {
        console.error('Error loading favorites:', error);
        if (loadingState) loadingState.classList.add('hidden');
        if (emptyState) emptyState.classList.remove('hidden');
        alert('Error al cargar tus favoritos');
      }
    }

    // Función para logout
    (window as any).handleLogout = async function() {
      const { error } = await supabase.auth.signOut();
      try {
        await fetch('/api/auth/session', {
          method: 'DELETE',
          credentials: 'same-origin'
        });
      } catch (apiError) {
        console.error('Error al limpiar la sesión del servidor:', apiError);
      }

      if (error) {
        console.error('Error al cerrar sesión:', error);
        alert('Error al cerrar sesión');
      } else {
        window.location.href = '/';
      }
    };

    // Inicializar al cargar la página
    initFavoritos();

    let currentPropertyId = '';
    let currentPropertyTitle = '';

    // Exponer funciones globalmente para atributos onclick
    (window as any).showInquiryModal = function(propertyId: string, propertyTitle: string) {
      currentPropertyId = propertyId;
      currentPropertyTitle = propertyTitle;
      const propertyIdElement = document.getElementById('propertyId') as HTMLInputElement;
      const inquiryModal = document.getElementById('inquiryModal');
      if (propertyIdElement && inquiryModal) {
        propertyIdElement.value = propertyId;
        inquiryModal.classList.remove('hidden');
        inquiryModal.classList.add('flex');
      }
    };

    (window as any).closeInquiryModal = function() {
      const inquiryModal = document.getElementById('inquiryModal');
      const inquiryForm = document.getElementById('inquiryForm') as HTMLFormElement;
      if (inquiryModal) {
        inquiryModal.classList.add('hidden');
        inquiryModal.classList.remove('flex');
      }
      if (inquiryForm) {
        inquiryForm.reset();
      }
    };

    // Exponer submitInquiry globalmente para que funcione desde onsubmit
    (window as any).submitInquiry = async function(event: Event) {
      event.preventDefault();
      const form = event.target as HTMLFormElement;
      const formData = new FormData(form);
      const data = Object.fromEntries(formData.entries());

      try {
        const response = await fetch('/api/inquiry', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(data)
        });

        if (response.ok) {
          const result = await response.json().catch(() => ({}));
          alert(result.message || '¡Consulta enviada correctamente! Te contactaremos pronto.');
          (window as any).closeInquiryModal();
        } else {
          // Intentar obtener el mensaje de error del servidor
          let errorMessage = 'Error al enviar la consulta. Inténtalo de nuevo.';
          try {
            const errorData = await response.json();
            errorMessage = errorData.error || errorData.message || errorMessage;
            console.error('Error del servidor:', errorData);
          } catch (e) {
            // Si no se puede parsear el JSON, usar el status text
            errorMessage = response.statusText || errorMessage;
            console.error('Error parseando respuesta:', e);
          }
          alert(errorMessage);
          console.error('Error completo en submitInquiry:', {
            status: response.status,
            statusText: response.statusText,
            message: errorMessage
          });
        }
      } catch (error) {
        console.error('Error en submitInquiry (catch):', error);
        alert('Error al enviar la consulta. Por favor, verifica tu conexión e inténtalo de nuevo.');
      }
    };

      // Cerrar modal al hacer clic fuera
      const inquiryModal = document.getElementById('inquiryModal');
      if (inquiryModal) {
        inquiryModal.addEventListener('click', (e) => {
          if ((e.target as HTMLElement).id === 'inquiryModal') {
            (window as any).closeInquiryModal();
          }
        });
      }

    // Callback para cuando se elimina un favorito
    (window as any).onFavoriteToggle = async (propertyId: string, isFavorite: boolean) => {
      if (!isFavorite) {
        // Si se eliminó de favoritos, recargar la lista
        const { data: { session } } = await supabase.auth.getSession();
        if (session?.user) {
          await loadFavorites(session.user.id);
        }
      }
    };
  </script>
</body>
</html>
