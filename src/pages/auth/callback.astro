---
// Página de callback para OAuth
export const prerender = false;

const url = new URL(Astro.request.url);
const code = url.searchParams.get('code');
const error = url.searchParams.get('error');
const redirectTo = url.searchParams.get('redirect') || '/';
---
<html>
  <head>
    <title>Procesando autenticación...</title>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
  </head>
  <body style="display: flex; align-items: center; justify-content: center; min-height: 100vh; font-family: system-ui;">
    <div style="text-align: center;">
      <p>Procesando autenticación...</p>
    </div>
    <script>
      import { getSupabaseClient } from '../../lib/supabase-client.js';
      
      (async () => {
        const supabase = getSupabaseClient();
        const urlParams = new URLSearchParams(window.location.search);
        const errorFromUrl = urlParams.get('error');
        const redirectFromUrl = urlParams.get('redirect') || '/';

        if (errorFromUrl) {
          window.location.href = `/?error=${encodeURIComponent(errorFromUrl)}`;
          return;
        }

        // Supabase con detectSessionInUrl: true procesa automáticamente el código
        const checkSession = async () => {
          const { data: { session }, error } = await supabase.auth.getSession();
          
          if (error || !session) {
            window.location.href = `/?error=${encodeURIComponent('Error al procesar la autenticación')}`;
            return;
          }

          // Sincronizar con el servidor para que las cookies se establezcan
          try {
            await fetch('/api/auth/session', {
              method: 'POST',
              headers: { 'content-type': 'application/json' },
              credentials: 'same-origin',
              body: JSON.stringify({
                session: {
                  access_token: session.access_token,
                  refresh_token: session.refresh_token,
                },
              }),
            });
          } catch (e) {
            // Silenciosamente fallar
          }

          window.location.href = redirectFromUrl;
        };

        // Intentar inmediatamente y si no hay sesión, esperar un poco
        try {
          const { data: { session } } = await supabase.auth.getSession();
          if (session) {
            await checkSession();
          } else {
            setTimeout(checkSession, 500);
          }
        } catch (error) {
          setTimeout(checkSession, 500);
        }
      })();
    </script>
  </body>
</html>
