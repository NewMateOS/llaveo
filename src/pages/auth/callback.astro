---
// P√°gina de callback para OAuth
// Con PKCE, el intercambio debe hacerse en el cliente porque el code_verifier est√° all√≠
export const prerender = false;

// Obtener par√°metros de la URL
const url = new URL(Astro.request.url);
const code = url.searchParams.get('code');
const error = url.searchParams.get('error');
const redirectTo = url.searchParams.get('redirect') || '/';

// Variables de entorno para pasar al cliente
const supabaseUrl = import.meta.env.PUBLIC_SUPABASE_URL || '';
const supabaseAnonKey = import.meta.env.PUBLIC_SUPABASE_ANON_KEY || '';

// Timestamp √∫nico para evitar cach√©
const timestamp = Date.now();
---

<html>
  <head>
    <title>Procesando autenticaci√≥n...</title>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <script>
      import { getSupabaseClient } from '../../lib/supabase-client';
      
      console.log('üîÑ [Callback] Script iniciado');
      
      // Timeout de seguridad: si el proceso tarda m√°s de 10 segundos, redirigir con error
      const timeoutId = setTimeout(() => {
        console.error('‚è±Ô∏è [Callback] Timeout: El proceso tard√≥ demasiado, redirigiendo...');
        window.location.href = `/?error=${encodeURIComponent('Timeout: El proceso de autenticaci√≥n tard√≥ demasiado. Por favor, intenta nuevamente.')}&_t=${Date.now()}`;
      }, 10000);
      
      try {
        // Usar el mismo cliente que se usa en el resto de la app
        // Esto asegura que el storageKey y la configuraci√≥n sean id√©nticos
        const supabase = getSupabaseClient();
        
        console.log('‚úÖ [Callback] Cliente Supabase obtenido (mismo que inici√≥ el flujo)');
        
        const urlParams = new URLSearchParams(window.location.search);
        const codeFromUrl = urlParams.get('code');
        const errorFromUrl = urlParams.get('error');
        const redirectFromUrl = urlParams.get('redirect') || '/';
        
        console.log('üîç [Callback] Par√°metros detectados:', {
          hasCode: !!codeFromUrl,
          hasError: !!errorFromUrl,
          redirectTo: redirectFromUrl
        });
        
        (async () => {
          try {
            if (errorFromUrl) {
              clearTimeout(timeoutId);
              console.error('‚ùå [Callback] Error en OAuth:', errorFromUrl);
              window.location.href = `/?error=${encodeURIComponent(errorFromUrl)}&_t=${Date.now()}`;
              return;
            }
            
            if (codeFromUrl) {
              console.log('üîÑ [Callback] C√≥digo OAuth detectado:', codeFromUrl.substring(0, 20) + '...');
              
              // Esperar un momento para que Supabase procese autom√°ticamente con detectSessionInUrl
              console.log('‚è≥ [Callback] Esperando procesamiento autom√°tico de Supabase...');
              await new Promise(resolve => setTimeout(resolve, 500));
              
              // Verificar si Supabase ya proces√≥ el c√≥digo autom√°ticamente
              let { data: sessionData, error: sessionError } = await supabase.auth.getSession();
              
              if (sessionData?.session) {
                console.log('‚úÖ [Callback] Supabase proces√≥ el c√≥digo autom√°ticamente:', sessionData.session.user.email);
                clearTimeout(timeoutId);
                
                // Peque√±o delay para asegurar que la sesi√≥n se guarde
                await new Promise(resolve => setTimeout(resolve, 200));
                
                // Limpiar el c√≥digo de la URL y redirigir
                window.location.href = `${redirectFromUrl}?success=login&_t=${Date.now()}`;
                return;
              }
              
              // Si no se proces√≥ autom√°ticamente, intentar intercambio manual
              console.log('üîÑ [Callback] No se proces√≥ autom√°ticamente, intentando intercambio manual...');
              
              // Verificar localStorage para debug
              const storage = window.localStorage;
              const keys = Object.keys(storage);
              const supabaseKeys = keys.filter(key => 
                key.includes('supabase') || 
                key.includes('sb-') || 
                key.includes('auth') ||
                key.includes('verifier') ||
                key.includes('pkce')
              );
              
              console.log('üîç [Callback] Debug localStorage:', {
                totalKeys: keys.length,
                supabaseKeys: supabaseKeys.length,
                allSupabaseKeys: supabaseKeys
              });
              
              // Intentar intercambio manual con timeout
              let exchangeResult;
              let exchangeError = null;
              
              try {
                const exchangePromise = supabase.auth.exchangeCodeForSession(codeFromUrl);
                const timeoutPromise = new Promise((_, reject) => 
                  setTimeout(() => reject(new Error('Exchange timeout after 8 seconds')), 8000)
                );
                
                exchangeResult = await Promise.race([exchangePromise, timeoutPromise]);
              } catch (err) {
                console.error('‚ùå [Callback] Timeout o error en intercambio:', err);
                exchangeError = err;
                exchangeResult = null;
              }
              
              const data = exchangeResult?.data || null;
              const exchangeErrorFromResult = exchangeResult?.error || null;
              const finalError = exchangeError || exchangeErrorFromResult;
              
              clearTimeout(timeoutId);
              
              // Verificar nuevamente la sesi√≥n despu√©s del intercambio manual
              if (finalError) {
                // Verificar si la sesi√≥n se cre√≥ de todas formas (puede haber un delay)
                const { data: checkSession } = await supabase.auth.getSession();
                if (checkSession?.session) {
                  console.log('‚úÖ [Callback] Sesi√≥n encontrada despu√©s del error (delay):', checkSession.session.user.email);
                  window.location.href = `${redirectFromUrl}?success=login&_t=${Date.now()}`;
                  return;
                }
                
                console.error('‚ùå [Callback] Error intercambiando c√≥digo:', finalError);
                const errorMessage = finalError.message || finalError.toString() || 'Error intercambiando c√≥digo';
                window.location.href = `/?error=${encodeURIComponent(errorMessage)}&_t=${Date.now()}`;
                return;
              }
              
              if (data?.session) {
                console.log('‚úÖ [Callback] Sesi√≥n creada exitosamente (intercambio manual):', data.session.user.email);
                
                // Peque√±o delay para asegurar que la sesi√≥n se guarde
                await new Promise(resolve => setTimeout(resolve, 200));
                
                // Limpiar el c√≥digo de la URL y redirigir
                window.location.href = `${redirectFromUrl}?success=login&_t=${Date.now()}`;
              } else {
                console.error('‚ùå [Callback] No se obtuvo sesi√≥n despu√©s del intercambio');
                window.location.href = `/?error=${encodeURIComponent('No se pudo crear la sesi√≥n')}&_t=${Date.now()}`;
              }
            } else {
              // No hay c√≥digo, redirigir normalmente
              clearTimeout(timeoutId);
              console.log('üîÑ [Callback] No hay c√≥digo, redirigiendo a:', redirectFromUrl);
              window.location.href = `${redirectFromUrl}?success=login&_t=${Date.now()}`;
            }
          } catch (err) {
            clearTimeout(timeoutId);
            console.error('‚ùå [Callback] Error inesperado:', err);
            window.location.href = `/?error=${encodeURIComponent('Error procesando la autenticaci√≥n: ' + (err.message || 'Error desconocido'))}&_t=${Date.now()}`;
          }
        })();
      } catch (initError) {
        clearTimeout(timeoutId);
        console.error('‚ùå [Callback] Error inicializando script:', initError);
        window.location.href = `/?error=${encodeURIComponent('Error inicializando autenticaci√≥n: ' + (initError.message || 'Error desconocido'))}&_t=${Date.now()}`;
      }
    </script>
  </head>
  <body>
    <div class="min-h-screen flex items-center justify-center bg-gray-50">
      <div class="text-center">
        <div class="w-16 h-16 rounded-2xl flex items-center justify-center mx-auto mb-4 shadow-md" style="background: linear-gradient(135deg, var(--primary) 0%, var(--primary-dark) 100%);">
          <span class="text-white font-bold text-2xl">L</span>
        </div>
        <h1 class="text-xl font-semibold text-gray-900 mb-2">Procesando autenticaci√≥n...</h1>
        <p class="text-gray-600">Por favor espera mientras completamos tu login.</p>
      </div>
    </div>
  </body>
</html>
