---
import AdminApp from '../../ui/AdminApp.jsx';
import { protectRoute } from '../../lib/auth';

// Asegurar que esta p√°gina se renderice en el servidor (no prerenderizada)
export const prerender = false;

// Verificar si hay un par√°metro de sincronizaci√≥n
const url = new URL(Astro.request.url);
const needsSync = url.searchParams.get('sync') === 'true';
const justSynced = url.searchParams.get('synced') === 'true';

// Si acaba de sincronizar, esperar un momento para que la cookie se establezca
if (justSynced) {
  await new Promise(resolve => setTimeout(resolve, 100));
}

// Si no necesita sincronizaci√≥n, verificar acceso normalmente
if (!needsSync) {
  const { user, hasAccess, error } = await protectRoute(Astro.cookies, 'admin');

  // Logging para debugging
  console.log('üîê [Admin] Verificaci√≥n de acceso:', {
    hasUser: !!user,
    userEmail: user?.email || 'N/A',
    userRole: user?.role || 'N/A',
    hasAccess,
    error: error || 'N/A',
    userId: user?.id || 'N/A',
    justSynced,
    cookiePresent: !!Astro.cookies.get('sb-server-auth-token')?.value
  });

  if (!hasAccess) {
    // Si no hay acceso pero hay sesi√≥n en el cliente, mostrar p√°gina de sincronizaci√≥n
    // De lo contrario, redirigir a acceso denegado
    // Por ahora, redirigir a acceso denegado
    console.log('‚ùå [Admin] Acceso denegado, redirigiendo a /access-denied');
    return Astro.redirect('/access-denied');
  }
}

const brand = import.meta.env.PUBLIC_BRAND_NAME || 'LLAVE';
---
{needsSync ? (
  // P√°gina intermedia para sincronizar sesi√≥n
  <html lang="es">
    <head>
      <meta charset="utf-8" />
      <meta name="viewport" content="width=device-width, initial-scale=1" />
      <title>Sincronizando sesi√≥n...</title>
    </head>
    <body style="display: flex; align-items: center; justify-content: center; min-height: 100vh; font-family: system-ui;">
      <div style="text-align: center;">
        <p>Sincronizando sesi√≥n...</p>
      </div>
      <script>
        // Leer sesi√≥n directamente de localStorage (Supabase la guarda ah√≠)
        async function syncAndRedirect() {
          try {
            const sessionStorageKey = 'sb-auth-token';
            const sessionData = localStorage.getItem(sessionStorageKey);
            
            if (!sessionData) {
              console.log('‚ö†Ô∏è [Admin] No hay sesi√≥n en localStorage');
              window.location.href = '/access-denied';
              return;
            }

            let session;
            try {
              session = JSON.parse(sessionData);
            } catch (e) {
              console.error('‚ùå [Admin] Error al parsear sesi√≥n:', e);
              window.location.href = '/access-denied';
              return;
            }

            // Supabase guarda la sesi√≥n como: { access_token, refresh_token, expires_at, user, ... }
            // O como: { currentSession: { access_token, refresh_token, ... } }
            let access_token, refresh_token;
            
            if (session?.access_token && session?.refresh_token) {
              // Formato directo
              access_token = session.access_token;
              refresh_token = session.refresh_token;
            } else if (session?.currentSession?.access_token && session?.currentSession?.refresh_token) {
              // Formato anidado
              access_token = session.currentSession.access_token;
              refresh_token = session.currentSession.refresh_token;
            } else if (typeof session === 'object' && Object.keys(session).length > 0) {
              // Intentar buscar en cualquier nivel del objeto
              const findTokens = (obj) => {
                if (obj?.access_token && obj?.refresh_token) {
                  return { access_token: obj.access_token, refresh_token: obj.refresh_token };
                }
                for (const key in obj) {
                  if (typeof obj[key] === 'object' && obj[key] !== null) {
                    const found = findTokens(obj[key]);
                    if (found.access_token && found.refresh_token) return found;
                  }
                }
                return {};
              };
              const tokens = findTokens(session);
              access_token = tokens.access_token;
              refresh_token = tokens.refresh_token;
            }

            if (!access_token || !refresh_token) {
              console.log('‚ö†Ô∏è [Admin] No se encontraron tokens de sesi√≥n v√°lidos');
              window.location.href = '/access-denied';
              return;
            }

            console.log('üîÑ [Admin] Sincronizando sesi√≥n con servidor...');
            
            const response = await fetch('/api/auth/session', {
              method: 'POST',
              headers: { 'content-type': 'application/json' },
              credentials: 'same-origin',
              body: JSON.stringify({
                session: {
                  access_token,
                  refresh_token,
                },
              }),
            });
            
              if (response.ok) {
                console.log('‚úÖ [Admin] Sesi√≥n sincronizada, esperando un momento antes de redirigir...');
                // Esperar un momento para asegurar que la cookie se estableci√≥
                await new Promise(resolve => setTimeout(resolve, 1000));
                // Redirigir a /admin con par√°metro synced=true para indicar que ya se sincroniz√≥
                window.location.href = '/admin?synced=true';
              } else {
              const errorText = await response.text();
              console.error('‚ùå [Admin] Error al sincronizar sesi√≥n:', errorText);
              window.location.href = '/access-denied';
            }
          } catch (error) {
            console.error('‚ùå [Admin] Error en syncAndRedirect:', error);
            window.location.href = '/access-denied';
          }
        }
        
        syncAndRedirect();
      </script>
    </body>
  </html>
) : (
  // P√°gina normal del admin
  <html lang="es">
    <head>
      <meta charset="utf-8" />
      <meta name="viewport" content="width=device-width, initial-scale=1" />
      <title>Panel de Administraci√≥n ¬∑ {brand}</title>
      <link rel="stylesheet" href="/src/styles/global.css" />
    </head>
    <body class="min-h-screen" style={`background:${import.meta.env.PUBLIC_BRAND_COLOR||'#E2905C'}`}>
      <div id="root"><AdminApp client:load /></div>
      <script>
        // Leer sesi√≥n directamente de localStorage y sincronizar en segundo plano
        (async function() {
          try {
            const sessionStorageKey = 'sb-auth-token';
            const sessionData = localStorage.getItem(sessionStorageKey);
            
            if (!sessionData) {
              console.log('‚ö†Ô∏è [Admin] No hay sesi√≥n en localStorage');
              return;
            }

            let session;
            try {
              session = JSON.parse(sessionData);
            } catch (e) {
              console.warn('‚ö†Ô∏è [Admin] Error al parsear sesi√≥n:', e);
              return;
            }

            // Supabase guarda la sesi√≥n como: { access_token, refresh_token, expires_at, user, ... }
            // O como: { currentSession: { access_token, refresh_token, ... } }
            let access_token, refresh_token;
            
            if (session?.access_token && session?.refresh_token) {
              access_token = session.access_token;
              refresh_token = session.refresh_token;
            } else if (session?.currentSession?.access_token && session?.currentSession?.refresh_token) {
              access_token = session.currentSession.access_token;
              refresh_token = session.currentSession.refresh_token;
            }

            if (access_token && refresh_token) {
              console.log('üîç [Admin] Sesi√≥n encontrada en cliente, verificando sincronizaci√≥n...');
              // Intentar sincronizar en segundo plano
              const response = await fetch('/api/auth/session', {
                method: 'POST',
                headers: { 'content-type': 'application/json' },
                credentials: 'same-origin',
                body: JSON.stringify({
                  session: {
                    access_token,
                    refresh_token,
                  },
                }),
              });
              
              if (!response.ok) {
                console.warn('‚ö†Ô∏è [Admin] No se pudo sincronizar sesi√≥n en segundo plano');
              } else {
                console.log('‚úÖ [Admin] Sesi√≥n sincronizada en segundo plano');
              }
            }
          } catch (err) {
            console.warn('‚ö†Ô∏è [Admin] Error al sincronizar sesi√≥n en segundo plano:', err);
          }
        })();
      </script>
    </body>
  </html>
)}
