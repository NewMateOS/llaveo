---
import SearchBar from '../components/SearchBar.astro';
import FavoriteButton from '../components/FavoriteButton.astro';
import '../styles/global.css';

const api = '/api/search';
const url = new URL(api, Astro.request.url);
Astro.url.searchParams.forEach((v: string, k: string) => url.searchParams.set(k, v));

interface PropertyItem {
  id: string;
  title: string;
  price: number;
  city: string;
  address?: string;
  description?: string;
  rooms?: number;
  baths?: number;
  area_m2?: number;
  status?: string;
  is_active?: boolean;
  property_images?: Array<{ url: string; sort_order?: number }>;
}

let items: PropertyItem[] = [];
let fetchError: string | null = null;
try {
  const res = await fetch(url.toString());
  if (res.ok) {
    const data = await res.json();
    items = (data.items || []).filter((item: PropertyItem) => item?.is_active !== false);
  } else {
    fetchError = 'No se pudieron cargar las propiedades.';
    console.error('Error fetching search results:', res.status, res.statusText);
  }
} catch (error) {
  console.error('Error fetching search results:', error);
  fetchError = 'Ocurrió un problema al conectar con la base de datos.';
}

function firstImg(arr: Array<{ url: string; sort_order?: number }> | null | undefined): string { 
  if (!arr || !arr.length) return ''; 
  return arr.sort((a, b) => (a.sort_order ?? 0) - (b.sort_order ?? 0))[0].url;
}
const brand = import.meta.env.PUBLIC_BRAND_NAME || 'LLAVE';
---
<html lang="es">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>Resultados · {brand}</title>
    
  </head>
  <body class="min-h-screen">
    <!-- Header - Material Design App Bar -->
    <header class="bg-white sticky top-0 z-40 shadow-sm border-b border-gray-100 app-header">
      <div class="max-w-7xl mx-auto px-6 py-4">
        <div class="flex justify-between items-center">
          <!-- Logo Section -->
          <div class="flex items-center gap-3">
            <a href="/" class="flex items-center gap-3">
              <img src="/logo.svg" alt={brand} class="h-10 w-auto" />
            </a>
          </div>
          
          <!-- Back Button -->
          <a href="/" class="inline-flex items-center gap-2 px-4 py-2 rounded-lg text-sm font-medium text-gray-600 hover:bg-gray-100 transition-colors duration-200 link-underline focus-ring">
            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19l-7-7m0 0l7-7m-7 7h18"></path>
            </svg>
            Nueva búsqueda
          </a>
        </div>
      </div>
    </header>

    <main class="max-w-7xl mx-auto px-6 py-8">
      <!-- Page Header -->
      <div class="mb-8 reveal">
        <!-- Search Bar (Sticky en móvil) -->
        <div class="mb-6 sm:mb-8 sticky top-20 z-40 lg:static">
          <SearchBar 
            value={Astro.url.searchParams.get('q') || ''}
            city={Astro.url.searchParams.get('city') || ''}
            status={Astro.url.searchParams.get('status') || ''}
            minRooms={Astro.url.searchParams.get('minRooms') || ''}
            minPrice={Astro.url.searchParams.get('minPrice') || ''}
            maxPrice={Astro.url.searchParams.get('maxPrice') || ''}
          />
        </div>
        <div class="mb-2">
          <h1 class="text-3xl md:text-4xl font-bold tracking-tight text-token-primary">Resultados de búsqueda</h1>
          <div class="mt-2 inline-flex items-center gap-2 px-3 py-1 rounded-full bg-white border border-gray-100 shadow-sm">
            <span class="text-sm font-medium text-token-secondary">{items.length} propiedades</span>
          </div>
        </div>
      </div>

        {fetchError && (
          <div class="bg-red-50 border border-red-100 text-red-700 rounded-xl p-6 mb-10 text-center">
            <h3 class="text-xl font-semibold mb-2">No se pudo cargar la búsqueda</h3>
            <p class="text-sm md:text-base">{fetchError}</p>
          </div>
        )}

          <!-- Results Grid -->
          <!-- Skeletons (se ocultan cuando el contenido está listo) -->
          <div id="results-skeletons" class="space-y-6 md:space-y-8">
            {Array.from({ length: 3 }).map(() => (
              <article class="bg-white rounded-xl shadow-sm border border-gray-100 overflow-hidden w-full">
                <div class="flex flex-col lg:flex-row">
                  <div class="relative overflow-hidden h-64 lg:h-80 lg:w-1/2 shimmer"></div>
                  <div class="p-8 lg:w-1/2 flex flex-col justify-between">
                    <div class="space-y-4">
                      <div class="h-7 w-3/4 shimmer rounded"></div>
                      <div class="h-4 w-1/2 shimmer rounded"></div>
                      <div class="h-16 w-full shimmer rounded"></div>
                      <div class="flex gap-4">
                        <div class="h-5 w-24 shimmer rounded"></div>
                        <div class="h-5 w-24 shimmer rounded"></div>
                        <div class="h-5 w-24 shimmer rounded"></div>
                      </div>
                    </div>
                    <div class="mt-6 flex gap-3">
                      <div class="h-11 flex-1 shimmer rounded-lg"></div>
                      <div class="h-11 w-32 shimmer rounded-lg"></div>
                    </div>
                  </div>
                </div>
              </article>
            ))}
          </div>
          
          <div id="results-list" class="grid grid-cols-1 md:grid-cols-2 gap-6 md:gap-8 hidden">
            {items.map((it) => (
              <article class="bg-white rounded-xl shadow-sm border border-gray-100 overflow-hidden hover:shadow-md transition-shadow duration-200 h-full reveal card-hover hover-lift tilt-hover group">
                <!-- Image Container -->
              <div class="relative overflow-hidden h-56 md:h-64">
                <a href={`/propiedad/${it.id}`} class="block">
                  <div class="absolute inset-0 shimmer"></div>
                  <img
                    src={firstImg(it.property_images) || 'https://images.unsplash.com/photo-1505691938895-1758d7feb511?w=800&h=600&fit=crop'}
                    alt={it.title} 
                    class="w-full h-full object-cover transition-transform duration-200 ease-out group-hover:scale-[1.02]" 
                    width="800"
                    height="600"
                    loading="lazy"
                    decoding="async"
                    onload="this.previousElementSibling && (this.previousElementSibling.style.display='none')"
                  />
                </a>
                <!-- Image Overlay on hover -->
                <div class="pointer-events-none absolute inset-0 bg-black/0 group-hover:bg-black/5 transition-colors duration-300"></div>
                <!-- Status Badge -->
                <div class="absolute top-4 right-4">
                  <span class="px-3 py-1 rounded-full text-xs font-medium text-white shadow-sm badge-soft badge-accent">
                    {it.status === 'venta' ? 'Venta' : 'Alquiler'}
                  </span>
                </div>
                <!-- Favorite Button -->
                <div class="absolute top-4 left-4">
                  <FavoriteButton propertyId={it.id} />
                </div>
              </div>
              
              <!-- Content -->
              <div class="p-6 flex flex-col gap-5">
                <div>
                  <a href={`/propiedad/${it.id}`} class="block hover:opacity-80 transition-opacity duration-200">
                    <h2 class="text-2xl font-semibold mb-4 hover:text-primary transition-colors duration-200 line-clamp-1 md:line-clamp-2 text-token-primary">
                      {it.title}
                    </h2>
                    
                    <!-- Location -->
                    <div class="flex items-center mb-4 text-gray-600">
                      <svg class="w-5 h-5 mr-2 text-token-brand" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z"></path>
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 11a3 3 0 11-6 0 3 3 0 016 0z"></path>
                      </svg>
                      <span class="text-base">{it.address} · {it.city}</span>
                    </div>
                    
                    <!-- Description -->
                    <p class="text-gray-600 mb-4 leading-relaxed line-clamp-1 md:line-clamp-2">
                      {it.description || 'Descripción no disponible'}
                    </p>
                    
                    <!-- Features -->
                    <div class="flex gap-6 mb-6 text-sm text-gray-600">
                      <div class="flex items-center">
                        <svg class="w-5 h-5 mr-2 text-token-brand" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 7v10a2 2 0 002 2h14a2 2 0 002-2V9a2 2 0 00-2-2H5a2 2 0 00-2-2z"></path>
                        </svg>
                        <span class="font-medium">{it.rooms ?? '—'} habitaciones</span>
                      </div>
                      <div class="flex items-center">
                        <svg class="w-5 h-5 mr-2 text-token-brand" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 14v3m4-3v3m4-3v3M3 21h18M3 10h18M3 7l9-4 9 4M4 10h16v11H4V10z"></path>
                        </svg>
                        <span class="font-medium">{it.baths ?? '—'} baños</span>
                      </div>
                      <div class="flex items-center">
                        <svg class="w-5 h-5 mr-2 text-token-brand" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 8V4m0 0h4M4 4l5 5m11-1V4m0 0h-4m4 0l-5 5M4 16v4m0 0h4m-4 0l5-5m11 5l-5-5m5 5v-4m0 4h-4"></path>
                        </svg>
                        <span class="font-medium">{it.area_m2 ?? '—'} m²</span>
                      </div>
                    </div>
                  </a>
                </div>
                
                <!-- Price and Actions -->
                <div class="border-t border-gray-100 pt-6">
                  <div class="flex items-center justify-between mb-6">
                    <div>
                      <span class="text-3xl font-bold text-token-brand">
                        {new Intl.NumberFormat('es-ES',{style:'currency',currency:'EUR'}).format(Number(it.price||0))}
                      </span>
                    </div>
                    
                  </div>
                  
                  <!-- Actions -->
                  <div class="flex gap-3">
                    <a href={`/propiedad/${it.id}`} class="flex-1 px-6 py-3 rounded-lg text-base font-medium text-white shadow-sm hover:shadow-md transition-all duration-200 text-center btn-primary focus-ring">
                      Ver detalles
                    </a>
                    <button 
                      class="px-6 py-3 rounded-lg text-base font-medium btn-ghost focus-ring"
                      data-id={it.id}
                      data-title={it.title}
                      onclick="showInquiryModal(this.dataset.id, this.dataset.title)"
                    >
                      Consultar
                    </button>
                  </div>
                </div>
              </div>
            </article>
            ))}
          </div>

      )}
      
      <!-- Empty State -->
      {!fetchError && items.length === 0 && (
        <div class="text-center py-16">
          <div class="w-24 h-24 mx-auto mb-6 rounded-full bg-gray-100 flex items-center justify-center">
            <svg class="w-12 h-12 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-5m-9 0H3m2 0h5M9 7h1m-1 4h1m4-4h1m-1 4h1m-5 10v-5a1 1 0 011-1h2a1 1 0 011 1v5m-4 0h4"></path>
            </svg>
          </div>
          <h3 class="text-xl font-semibold mb-2 text-token-primary">No encontramos propiedades</h3>
          <p class="text-gray-600 mb-6">Intenta ajustar los filtros de búsqueda para encontrar más resultados.</p>
          <a href="/" class="inline-flex items-center gap-2 px-6 py-3 rounded-lg text-sm font-medium text-white shadow-sm hover:shadow-md transition-all duration-200 btn-primary">
            Nueva búsqueda
            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
            </svg>
          </a>
        </div>
      )}
    </main>

    <!-- Modal de consulta - Material Design -->
    <div id="inquiryModal" class="fixed inset-0 bg-black bg-opacity-50 hidden items-center justify-center z-50 p-4">
      <div class="bg-white rounded-xl shadow-xl max-w-md w-full">
        <!-- Modal Header -->
        <div class="px-6 py-4 border-b border-gray-100">
          <div class="flex items-center justify-between">
            <h3 class="text-lg font-semibold text-token-primary">Consultar sobre esta propiedad</h3>
            <button 
              onclick="closeInquiryModal()"
              class="w-8 h-8 rounded-lg flex items-center justify-center hover:bg-gray-100 transition-colors duration-200 focus-ring"
            >
              <svg class="w-5 h-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
              </svg>
            </button>
          </div>
        </div>
        
        <!-- Modal Body -->
        <form id="inquiryForm" onsubmit="submitInquiry(event)" class="px-6 py-6">
          <input type="hidden" id="propertyId" name="property_id" />
          
          <div class="space-y-4">
            <div>
              <label class="block text-sm font-medium mb-2 text-token-primary">Nombre *</label>
              <input 
                type="text" 
                name="name" 
                required 
                class="w-full px-4 py-3 border border-gray-200 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent transition-all duration-200" 
              />
            </div>
            
            <div>
              <label class="block text-sm font-medium mb-2 text-token-primary">Email *</label>
              <input 
                type="email" 
                name="email" 
                required 
                class="w-full px-4 py-3 border border-gray-200 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent transition-all duration-200" 
              />
            </div>
            
            <div>
              <label class="block text-sm font-medium mb-2 text-token-primary">Teléfono</label>
              <input 
                type="tel" 
                name="phone" 
                class="w-full px-4 py-3 border border-gray-200 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent transition-all duration-200" 
              />
            </div>
            
            <div>
              <label class="block text-sm font-medium mb-2 text-token-primary">Mensaje</label>
              <textarea 
                name="message" 
                rows="4" 
                class="w-full px-4 py-3 border border-gray-200 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary focus:border-transparent transition-all duration-200 resize-none" 
                placeholder="Cuéntanos qué te interesa saber sobre esta propiedad..."
              ></textarea>
            </div>
          </div>
          
          <!-- Modal Footer -->
          <div class="flex gap-3 mt-6">
            <button 
              type="button" 
              onclick="closeInquiryModal()" 
              class="flex-1 py-3 px-4 border border-gray-200 rounded-lg text-sm font-medium hover:bg-gray-50 transition-colors duration-200 focus-ring"
            >
              Cancelar
            </button>
            <button 
              type="submit" 
              class="flex-1 py-3 px-4 rounded-lg text-sm font-medium text-white shadow-sm hover:shadow-md transition-all duration-200 btn-primary"
            >
              Enviar consulta
            </button>
          </div>
        </form>
      </div>
    </div>

    <script nonce={Astro.locals.cspNonce}>
      // Header elevated on scroll
      const headerEl = document.querySelector('header.app-header');
      const elevateHeader = () => {
        if (!headerEl) return;
        if (window.scrollY > 6) headerEl.classList.add('header-elevated');
        else headerEl.classList.remove('header-elevated');
      };
      window.addEventListener('scroll', elevateHeader, { passive: true });
      elevateHeader();

      // Mostrar resultados y ocultar skeletons cuando el contenido esté listo
      const skeletons = document.getElementById('results-skeletons');
      const resultsList = document.getElementById('results-list');
      const showResults = () => {
        if (skeletons) skeletons.classList.add('hidden');
        if (resultsList) resultsList.classList.remove('hidden');
      };
      if (document.readyState === 'complete') {
        showResults();
      } else {
        window.addEventListener('load', showResults, { once: true });
        // Fallback por si load tarda mucho
        setTimeout(showResults, 1200);
      }

      // Reveal on scroll - optimizado con IntersectionObserver
      const prefersReducedMotion = window.matchMedia('(prefers-reduced-motion: reduce)').matches;
      if (!prefersReducedMotion && 'IntersectionObserver' in window) {
        // Usar requestIdleCallback si está disponible para mejor rendimiento
        const observeReveal = () => {
          const observer = new IntersectionObserver((entries) => {
            entries.forEach((entry) => {
              if (entry.isIntersecting) {
                entry.target.classList.add('is-visible');
                observer.unobserve(entry.target);
              }
            });
          }, { threshold: 0.1, rootMargin: '0px 0px -5% 0px' });
          
          document.querySelectorAll('.reveal').forEach((el) => observer.observe(el));
        };
        
        if ('requestIdleCallback' in window) {
          requestIdleCallback(observeReveal, { timeout: 2000 });
        } else {
          setTimeout(observeReveal, 0);
        }
      } else {
        document.querySelectorAll('.reveal').forEach((el) => el.classList.add('is-visible'));
      }

      let currentPropertyId = '';
      let currentPropertyTitle = '';

      // Exponer funciones globalmente para atributos onclick
      (window as any).showInquiryModal = function(propertyId: string, propertyTitle: string) {
        currentPropertyId = propertyId;
        currentPropertyTitle = propertyTitle;
        const propertyIdElement = document.getElementById('propertyId') as HTMLInputElement;
        const inquiryModal = document.getElementById('inquiryModal');
        if (propertyIdElement && inquiryModal) {
          propertyIdElement.value = propertyId;
          inquiryModal.classList.remove('hidden');
          inquiryModal.classList.add('flex');
        }
      };

      (window as any).closeInquiryModal = function() {
        const inquiryModal = document.getElementById('inquiryModal');
        const inquiryForm = document.getElementById('inquiryForm') as HTMLFormElement;
        if (inquiryModal) {
          inquiryModal.classList.add('hidden');
          inquiryModal.classList.remove('flex');
        }
        if (inquiryForm) {
          inquiryForm.reset();
        }
      };

      // Exponer submitInquiry globalmente para que funcione desde onsubmit
      (window as any).submitInquiry = async function(event: Event) {
        event.preventDefault();
        const form = event.target as HTMLFormElement;
        const formData = new FormData(form);
        const data = Object.fromEntries(formData.entries());

        try {
          const response = await fetch('/api/inquiry', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(data)
          });

          if (response.ok) {
            const result = await response.json().catch(() => ({}));
            alert(result.message || '¡Consulta enviada correctamente! Te contactaremos pronto.');
            (window as any).closeInquiryModal();
          } else {
            // Intentar obtener el mensaje de error del servidor
            let errorMessage = 'Error al enviar la consulta. Inténtalo de nuevo.';
            try {
              const errorData = await response.json();
              errorMessage = errorData.error || errorData.message || errorMessage;
            } catch (e) {
              // Si no se puede parsear el JSON, usar el status text
              errorMessage = response.statusText || errorMessage;
              console.error('Error parseando respuesta:', e);
            }
            alert(errorMessage);
            console.error('Error en submitInquiry:', {
              status: response.status,
              statusText: response.statusText,
              message: errorMessage
            });
          }
        } catch (error) {
          console.error('Error en submitInquiry (catch):', error);
          alert('Error al enviar la consulta. Por favor, verifica tu conexión e inténtalo de nuevo.');
        }
      };

      // Cerrar modal al hacer clic fuera
      const inquiryModal = document.getElementById('inquiryModal');
      if (inquiryModal) {
        inquiryModal.addEventListener('click', (e) => {
          if ((e.target as HTMLElement).id === 'inquiryModal') {
            (window as any).closeInquiryModal();
          }
        });
      }

      // Funcionalidad de favoritos - usar la función global de FavoriteButton
      // La función toggleFavorite ya está definida globalmente por FavoriteButton.astro
      // Solo necesitamos asegurarnos de que se inicialice correctamente
      if ((window as any).loadFavoritesState) {
        (window as any).loadFavoritesState();
      }

      // Función para toggle de filtros en la barra de búsqueda
      (window as any).toggleResultadosFilters = function() {
        const filtersContainer = document.getElementById('filters-container');
        if (filtersContainer) {
          filtersContainer.classList.toggle('hidden');
        }
      };
    </script>
  </body>
</html>
